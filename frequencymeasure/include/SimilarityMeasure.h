/*******************************************************************************

    Author:      Pavlov Anton
    Created:     2006/11/21
    Description: 

*******************************************************************************/

/**
 * @file
 * The base interfaces for the documents ( Document ) and similarity measures
 * ( SimilarityMeasure ).
 */

#pragma once

#include "Types.h"
#include "Document.h"

namespace Similarity
{
    /**
     * This class defines a common interface for similarity measures.
     *
     * The implementing class must support a way of preloading set of
     * documents, to allow faster comparison of documents with preloaded
     * set.
     *
     * @see Document
     */
    class SimilarityMeasure
    {
    private:
    protected:
    public:
        /**
         * Calculates similarity measure between two documents.
         *
         * @see Document
         *
         * @param doc1 the first input Document
         *
         * @param doc2 the second input Document
         *
         * @return similarity measure between doc1 and doc2
         */
        virtual real similarity(Document &doc1, Document &doc2) = 0;
        /**
         * Calculates similarity measure between a document
         * and a set of preloaded documents.
         *
         * @see preload()
         *
         * @see preloadedSetSize()
         *
         * @see Document
         *
         * @param doc the Document, to compare with preloaded set
         *
         * @param dest the array, where to put resulting similarity values
         * must have length no less than preloadedSetSize().
         */
        virtual void similarity(Document &doc, real *dest) = 0;
        /**
         * Calculates the similarity between two documents in the preloaded 
         * set.
         *
         * Indices of the documents must not be greater than 
         * preloadedSetSize().
         *
         * Should use some sort of cache to optimize
         * access.
         *
         * @param i1 the index of the first document
         *
         * @param i2 the index of the second document
         *
         * @return the similarity measure between the documents
         */
        virtual real similarity(size_t i1, size_t i2) = 0;
        /**
         * Calculates similarity measures between a document from
         * the training set with the i index and every other document
         * in the training set.
         *
         * @see preload()
         *
         * @see preloadedSetSize()
         *
         * @see Document
         *
         * @param i index of a document to be compared with the whole training
         * set
         *
         * @param dest the array, where to put resulting values
         * must have length no less than preloadedSetSize().
         */
        virtual void similarity(size_t i, real *dest) = 0;
        /**
         * Returns the number of documents preloaded.
         *
         * @see preload()
         *
         * @return the number of documents.
         */
        virtual size_t preloadedSetSize() = 0;
        /**
         * Preloads the documents in the docs array. Performs all needed
         * calculations to ensure that similarity() functions perform
         * as fast as possible.
         *
         * @see Document
         *
         * @see preloadedSetSize()
         *
         * @param docs the array of pointers to documents to process
         *
         * @param number the size of the docs array
         */
        virtual void preload(Document **docs, size_t number) = 0;

        /**
         * Writes all the required data to a file in binary format, to allow
         * restoring the measure data from this file.
         *
         * @param preloadedSetFilename the name of a file where to put the set.
         */
        virtual void saveToBinaryFile(const char *preloadedSetFilename) = 0;

        /**
         * Reads the measure data from a file, which was previously
         * generated by saveToBinaryFile() function.
         *
         * @param preloadedSetFilename the name of the file, which contains
         * measure data
         */
        virtual void readFromBinaryFile(const char *preloadedSetFilename) = 0;
    };
};
